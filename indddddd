<html>
	<head>
	<link rel="stylesheet" href="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css" />
	<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
	<script src="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js"></script>
	<style type="text/css">
		.map-marker {
			font-size: 2em;
			left: -0.5em;
			top: -1.5em;
		}
		.red { color: red; }
		.blue { color: blue; }
	</style>
	</head>
	<body>
		<div id="map" style="height: 600px;"></div>
		<script type="text/javascript" >
			var origin = [51.505, -0.09];
			// miles * meters per mile.
			var radiusMeters = 3 * 1609.34;
		
			var osmUrl="http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"; // This the OSM public tile layer for the map url template. 
			var osmTileLayer = L.tileLayer(osmUrl, {minZoom: 8, maxZoom: 12});
			
			// we use the starting coordinates to center the map.
			var map = L.map("map").addLayer(osmTileLayer).setView(origin, 12);

			// These are the points of interest that we are going to filter and get travel time for.
			var POI = [
				{coords: [51.501988, -0.018267], name: "POI0" },
				{coords: [51.505, -0.10], name: "POI1" },
				{coords: [51.51, -0.16], name: "POI2" },
				{coords: [51.525276, -0.033919], name: "POI3" },
				{coords: [51.523860, -0.065301], name: "POI4" },
				{coords: [51.449830, -0.045265], name: "POI5" },
				{coords: [51.462951, -0.135480], name: "POI6" },
				{coords: [51.518080, -0.127841], name: "POI7" },
				{coords: [51.489754, -0.119242], name: "POI8" }		//This is a point that is 5 miles away from orgin		
			];

			function calculateDistance(lat1, lng1, lat2, lng2) {
				Math.radians = function(deg) { return deg * (Math.PI/180); }
				var R = 6371000;
				var fi1 = Math.radians(lat1);
				var fi2 = Math.radians(lat2);
				var dfi = Math.radians(lat2-lat1);
				var dla = Math.radians(lng2-lng1);

				var a = Math.sin(dfi/2) * Math.sin(dfi/2) +
        			Math.cos(fi1) * Math.cos(fi2) *
        			Math.sin(dla/2) * Math.sin(dla/2);
				var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));

				return R * c;
			}
			
			function filterByDistance(origin, poi, distance) {
				return poi.filter(function(element, index, array) { return calculateDistance(origin[0], origin[1], element.coords[0], element.coords[1]) < distance; });
			}

			function drawMarkers(poi, map, color) {
				for (var i = 0; i < poi.length; i++) {
					var icon = L.divIcon({className: "glyphicon glyphicon-map-marker map-marker " + color})
					L.marker(poi[i].coords, {icon: icon}).addTo(map);
				}
			}
			
			function drawCircle(center, radius, map) {
				L.circle(center, radius).addTo(map);
			}
			
			drawCircle(origin, radiusMeters , map); // Draws a circle with a 5 miles radius.
			
			var poiInsideCircle = filterByDistance(origin, POI, radiusMeters);
			var poiOutsideCircle = POI.filter(function(element, index, array) { return poiInsideCircle.indexOf(element) < 0; })
			
			drawMarkers(poiInsideCircle, map, "blue");
			drawMarkers(poiOutsideCircle, map, "red");
			
		</script>
	</body>
</html>
